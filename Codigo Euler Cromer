import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Clase para representar un cuerpo celeste
class CuerpoCeleste:
    def __init__(self, nombre, masa, eje_semi_mayor, velocidad_orbital):
        self.nombre = nombre  # Nombre del cuerpo celeste
        self.masa = masa  # Masa del cuerpo
        self.posicion = np.array([eje_semi_mayor, 0.0, 0.0], dtype=float)  # Posición inicial
        self.velocidad = np.array([0.0, velocidad_orbital, 0.0], dtype=float)  # Velocidad orbital
        self.posiciones = []  # Lista para almacenar todas las posiciones durante la simulación

# Función para calcular la aceleración gravitacional
def aceleracion_gravitacional(cuerpo, otros_cuerpos):
    G = 6.674 * (10**(-11))  # Constante gravitacional
    fuerza_total = np.zeros(3)  # Fuerza total inicialmente en cero
    for otro_cuerpo in otros_cuerpos:
        if cuerpo != otro_cuerpo:
            r = otro_cuerpo.posicion - cuerpo.posicion  # Vector de distancia
            distancia = np.linalg.norm(r)  # Calcular la distancia
            magnitud_fuerza = (G * cuerpo.masa * otro_cuerpo.masa) / (distancia**2)
            fuerza_total += magnitud_fuerza * r / distancia
    return fuerza_total / cuerpo.masa

# Implementación del paso Euler-Cromer para la simulación
def paso_euler_cromer(cuerpo, otros_cuerpos, dt):
    aceleracion = aceleracion_gravitacional(cuerpo, otros_cuerpos)  # Calcular la aceleración
    cuerpo.velocidad += dt * aceleracion  # Actualizar la velocidad
    cuerpo.posicion += dt * cuerpo.velocidad  # Actualizar la posición
    cuerpo.posiciones.append(cuerpo.posicion.copy())  # Guardar la posición actual

# Simular el sistema solar
def simular_sistema_solar(cuerpos_celestes, num_pasos, dt):
    for paso in range(num_pasos):
        for cuerpo in cuerpos_celestes:
            otros_cuerpos = [otro for otro in cuerpos_celestes if otro != cuerpo]
            paso_euler_cromer(cuerpo, otros_cuerpos, dt)

# Visualizar las órbitas de los cuerpos celestes
def visualizar_orbitas(cuerpos_celestes):
    figura = plt.figure(figsize=(10, 8))
    eje = figura.add_subplot(111, projection='3d')

    for cuerpo in cuerpos_celestes:
        posiciones = np.array(cuerpo.posiciones)
        eje.plot(posiciones[:, 0], posiciones[:, 1], posiciones[:, 2], label=cuerpo.nombre)

    eje.set_xlabel('X (m)')
    eje.set_ylabel('Y (m)')
    eje.set_zlabel('Z (m)')
    eje.set_title('Órbitas del Sistema Solar')
    eje.legend()

    plt.show()

# Datos de los planetas proporcionados por el usuario
datos_cuerpos_celestes = {
    "Mercurio": {"mass": 3.285 * (10**23), "semi_major_axis": 0.3871 * 1.496e11, "orbital_velocity": 47.9 * 1000},
    "Venus": {"mass": 4.867 * (10**24), "semi_major_axis": 0.7233 * 1.496e11, "orbital_velocity": 35.0 * 1000},
    "Tierra": {"mass": 5.972 * (10**24), "semi_major_axis": 1.000 * 1.496e11, "orbital_velocity": 29.8 * 1000},
    "Marte": {"mass": 6.39 * (10**23), "semi_major_axis": 1.5273 * 1.496e11, "orbital_velocity": 24.1 * 1000},
    "Júpiter": {"mass": 1.898 * (10**27), "semi_major_axis": 5.2028 * 1.496e11, "orbital_velocity": 13.1 * 1000},
    "Saturno": {"mass": 5.683 * (10**26), "semi_major_axis": 9.5388 * 1.496e11, "orbital_velocity": 9.6 * 1000},
    "Urano": {"mass": 8.681 * (10**25), "semi_major_axis": 19.1914 * 1.496e11, "orbital_velocity": 6.8 * 1000},
    "Neptuno": {"mass": 1.024 * (10**26), "semi_major_axis": 30.0611 * 1.496e11, "orbital_velocity": 5.4 * 1000}
}

# Crear los objetos CuerpoCeleste
cuerpos_celestes = []
for nombre, datos in datos_cuerpos_celestes.items():
    cuerpo = CuerpoCeleste(nombre, datos["mass"], datos["semi_major_axis"], datos["orbital_velocity"])
    cuerpos_celestes.append(cuerpo)

# Asumiendo que el Sol está en el origen y no se mueve
sol = CuerpoCeleste("Sol", 1.989 * (10**30), 0, 0)
cuerpos_celestes.insert(0, sol)  # Agregar el Sol al principio de la lista

# Parámetros de la simulación
dt = 86400  # Un día en segundos
num_pasos = 365 * 10  # 10 años

# Realizar la simulación
simular_sistema_solar(cuerpos_celestes, num_pasos, dt)

# Visualizar las órbitas
visualizar_orbitas(cuerpos_celestes)
